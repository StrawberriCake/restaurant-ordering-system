name: Build and push Frontend/Backend image to ECR
run-name: ${{ github.actor }} is running ECR build-and-push on GitHub Actions ðŸš€
on:
  pull_request:
  workflow_dispatch:
  # push:
  #   # branches:
  #   #   - feature/ci-build-docker-image-ecr
  #   paths:
  #     - '../backend/**'
  #     - '../frontend/**'
env:
  ECR_ENDPOINT: public.ecr.aws/u2q1a2y8
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
           fetch-depth: 0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to AWS ECR
        id: login-ecr
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_ENDPOINT }}
      - name: Get changed files
        id: changed-files
        run: |
          echo "CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep "^backend/"; then
            echo "FOLDER_CHANGED=backend" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q "^frontend/"; then
            echo "FOLDER_CHANGED=frontend" >> $GITHUB_ENV
          else
            echo "No relevant changes detected."
            exit 1
          fi
            
      - name: Build and push Docker image for backend
        working-directory: ./backend
        if: env.FOLDER_CHANGED == 'backend'
        env:
          IMAGE_TAG: latest
        run: |
          docker build -t ${{ vars.BACKEND_IMAGE_NAME }} .
          docker push ${{ env.ECR_ENDPOINT }}/${{ vars.BACKEND_IMAGE_NAME }}:$IMAGE_TAG

      - name: Build and push Docker image for frontend
        working-directory: ./frontend
        if: env.FOLDER_CHANGED == 'frontend'
        env:
          IMAGE_TAG: latest
        run: |
          docker build -t ${{ vars.FRONTEND_IMAGE_NAME }} .
          docker push ${{ env.ECR_ENDPOINT }}/${{ vars.FRONTEND_IMAGE_NAME }}:$IMAGE_TAG
      
      
      
      
      
      

#
#      - name: Frontend docker build and tag
#        run: |
#          docker build -t ${{ vars.FRONTEND_IMAGE_NAME }} .
#          docker tag ${{ vars.IMAGE_NAME }}:latest ${{ env.ECR_ENDPOINT }}/${{ vars.FRONTEND_IMAGE_NAME }}:latest
#      - name: Run frontend image scan
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: '${{ vars.FRONTEND_IMAGE_NAME }}:latest'
#          format: 'table'
#          # exit-code: '1'
#          ignore-unfixed: true
#          vuln-type: 'os,library'
#          severity: 'MEDIUM,HIGH,CRITICAL'
#          output: 'frontend-docker-image-scan.json'
#      - name: Upload Docker Trivy Report
#        uses: actions/upload-artifact@v4.3.0
#        with:
#          name: docker-image-scan
#          path: docker-image-scan.json
#      - name: Docker publish to ECR
#        run: docker push ${{ env.ECR_ENDPOINT }}/${{ vars.FRONTEND_IMAGE_NAME }}:latest
