name: Build and push Frontend/Backend image to ECR
run-name: ${{ github.actor }} is running ECR build-and-push on GitHub Actions ðŸš€
on:
  # pull_request:
  workflow_dispatch:
      inputs:
        branch:
          description: 'The branch to build'
          required: true
        environment:
          description: 'The environment to deploy to'
          required: false
  push:
    branches:
      - feature/ci-build-docker-image-ecr

env:
  ECR_ENDPOINT: public.ecr.aws/u2q1a2y8
jobs:
  check_for_image_to_build:
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    outputs:
      IMAGES_TO_BUILD: ${{ steps.set_images.outputs.IMAGES_TO_BUILD }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
           fetch-depth: 0

      - name: Get changed files manually
        run: |
          files_list="$(git diff --name-only ${{ github.event.before }} HEAD | xargs)"
          echo '# Files with git command' >> "${GITHUB_STEP_SUMMARY}"
          echo '' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

          for file in ${files_list}; do
            echo "$file was changed" >> "${GITHUB_STEP_SUMMARY}"
          done

          echo '```' >> "${GITHUB_STEP_SUMMARY}"

          # save files into variable
          printf 'THE_FILES=%s\n' "${files_list}" >> "${GITHUB_ENV}"
           
      - name: Get docker image names
        shell: python
        env:
          PROJECT_IMAGE_MAP: '{"backend": "${{ vars.BACKEND_IMAGE_NAME }}", "frontend": "${{ vars.FRONTEND_IMAGE_NAME }}"}'
        run: |
          from os import environ
          import json
          
          # split files string into list. Divide by spaces
          files = environ.get("THE_FILES").split(' ')
          print(files)
          proj_image_map = json.loads(environ.get("PROJECT_IMAGE_MAP"))
          print(proj_image_map)

          images = []

          # check if backend, frontend, etc is a part of changed file path
          for file in files:
            for k, v in proj_image_map.items():
              if k in file:
                if v not in images:
                  images.append(v)

          # save retreived images as json array
          with open(environ.get("GITHUB_ENV"), 'a') as f:
            f.write('IMAGES_TO_BUILD=' + json.dumps(images) + '\n')

      - name: Set image names as output for matrix
        id: set_images
        run: |
          echo "IMAGES_TO_BUILD=${IMAGES_TO_BUILD}" >> $GITHUB_OUTPUT


  # print_image_names_with_matrix:
  #   name: "Build image: ${{ matrix.image }}"
  #   runs-on: ubuntu-latest
  #   needs: check_for_image_to_build
  #   strategy:
  #     matrix:
  #       image: ${{ fromJson( needs.check_for_image_to_build.outputs.IMAGES_TO_BUILD ) }} 
  #   steps:
  #     - name: Check if IMAGES_TO_BUILD is empty
  #       id: check_images_to_build
  #       run: |
  #         IMAGES_TO_BUILD_ARRAY=$(echo ${{ env.IMAGES_TO_BUILD }} | jq length)
  #         echo $IMAGES_TO_BUILD_ARRAY
  #         if [ "$IMAGES_TO_BUILD_ARRAY" -eq 0 ]; then
  #           echo "No docker image to build and push. Exiting..."
  #           exit 0
  #         else
  #           echo "IMAGES_TO_BUILD array is not empty."
  #         fi
  #     - name: Print image name from matrix
  #       run: |
  #         echo "${{ matrix.image }}"


  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [check_for_image_to_build] #, print_image_names_with_matrix]
    if: needs.check_for_image_to_build.outputs.IMAGES_TO_BUILD != '[]'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to AWS ECR
        id: login-ecr
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_ENDPOINT }}

      # - name: Conditionally Run
      #   if:   contains(env.IMAGES_TO_BUILD, 'SomeString')
      #   run:  echo "SomeString did exist and should run"
      
      - name: Build and push frontend image to ECR
        env:
          IMAGE_TAG: latest
          IMAGES_TO_BUILD:  ${{ needs.check_for_image_to_build.outputs.IMAGES_TO_BUILD }}
        if: contains(fromJson('env.IMAGES_TO_BUILD'), '${{ vars.FRONTEND_IMAGE_NAME }}')
        run: |
          echo ${{ env.IMAGES_TO_BUILD }}
          echo "Building frontend image"
          docker build -t ${{ vars.FRONTEND_IMAGE_NAME }} ./frontend
          docker tag ${{ vars.FRONTEND_IMAGE_NAME }}:$IMAGE_TAG ${{ env.ECR_ENDPOINT }}/${{ vars.FRONTEND_IMAGE_NAME }}:$IMAGE_TAG

      - name: Run frontend image scan
        uses: aquasecurity/trivy-action@master
        with:
           image-ref: '${{ vars.FRONTEND_IMAGE_NAME }}:latest'
           format: 'table'
           # exit-code: '1'
           ignore-unfixed: true
           vuln-type: 'os,library'
           severity: 'MEDIUM,HIGH,CRITICAL'
           output: 'frontend-docker-image-scan.json'
      - name: Upload Docker Trivy Report
        uses: actions/upload-artifact@v4.3.0
        with:
           name: frontend-docker-image-scan
           path: frontend-docker-image-scan.json
      - name: Docker publish to ECR
        run: |
          echo "Pushing frontend image to ECR"
          docker push ${{ env.ECR_ENDPOINT }}/${{ vars.FRONTEND_IMAGE_NAME }}:$IMAGE_TAG

          

      - name: Build and push backend image to ECR
        if: contains(fromJson(env.IMAGES_TO_BUILD), ${{ vars.BACKEND_IMAGE_NAME }})
        env:
          IMAGE_TAG: latest
        run: |
          echo "Building backend image"
          docker build -t ${{ vars.BACKEND_IMAGE_NAME }} ./backend
          docker tag ${{ vars.BACKEND_IMAGE_NAME }}:$IMAGE_TAG ${{ env.ECR_ENDPOINT }}/${{ vars.BACKEND_IMAGE_NAME }}:$IMAGE_TAG
          echo "Pushing backend image to ECR"
          docker push ${{ env.ECR_ENDPOINT }}/${{ vars.BACKEND_IMAGE_NAME }}:$IMAGE_TAG


      
      
      

#
#      - name: Frontend docker build and tag
#        run: |
#          docker build -t ${{ vars.FRONTEND_IMAGE_NAME }} .
#          docker tag ${{ vars.IMAGE_NAME }}:latest ${{ env.ECR_ENDPOINT }}/${{ vars.FRONTEND_IMAGE_NAME }}:latest
     # - name: Run frontend image scan
     #   uses: aquasecurity/trivy-action@master
     #   with:
     #     image-ref: '${{ vars.FRONTEND_IMAGE_NAME }}:latest'
     #     format: 'table'
     #     # exit-code: '1'
     #     ignore-unfixed: true
     #     vuln-type: 'os,library'
     #     severity: 'MEDIUM,HIGH,CRITICAL'
     #     output: 'frontend-docker-image-scan.json'
     # - name: Upload Docker Trivy Report
     #   uses: actions/upload-artifact@v4.3.0
     #   with:
     #     name: docker-image-scan
     #     path: docker-image-scan.json
     # - name: Docker publish to ECR
     #   run: docker push ${{ env.ECR_ENDPOINT }}/${{ vars.FRONTEND_IMAGE_NAME }}:latest
